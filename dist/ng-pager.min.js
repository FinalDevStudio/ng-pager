!function(t){"use strict";function e(t){function e(e,n,g){function r(t){e.total=parseInt(t.data||0),e.pageCount=parseInt(g.ngpPageCount),e.pages=p(),g.ngpStartPage&&(e.page=parseInt(g.ngpStartPage)||1,e.page>e.pages.length&&(e.page=e.pages.length),e.page<1&&(e.page=1),console.log("Start page: "+e.page))}function a(t){e.page=t,e.pager(t)}function l(){e.page<e.pages.length&&a(++e.page)}function i(){e.page>1&&a(--e.page)}function h(){t.get(g.ngpCountUrl).then(r)}function p(){for(var t=isNaN(t)?8:t,n=isNaN(n)?10:n,g=[],r=[],a=0,l=0,i=Math.floor(e.total/e.pageCount);l<i;l++)g.push(++a);return e.total%e.pageCount&&g.push(++a),g.length>7?r=f(e.page,t,g):g}function f(t,e,n){for(var g={left:[],right:[]},r=--t,a=--r;a>=0;a--)g.left.unshift(n[a]);for(var l=++r;l<n.length;l++)g.right.push(n[l]);var i=o(e-2,g.left.length,n),h=u(i,g),p={left:[],right:[],all:[],join:function(t){this.left.push(t),this.all=this.left.concat(this.right)}};return p.left=h.left,p.right=h.right,p.join(n[r]),p.all.length>e&&p.all.splice(1,1),p.all}function o(t,e,n){var g=s(e,n.length),r=Math.ceil(t*g.integer/100),a=Math.abs(t-r),l={left:0,right:0};return g.decimal>=5?(l.left=++r,l.right=a):(l.left=r,l.right=++a),l}function u(t,e){for(var n=Math.ceil(e.left.length/t.left),g=Math.ceil(e.right.length/t.right),r={left:[],right:[]},a=0;a<e.left.length;a+=n)r.left.push(e.left[a]);if(1===e.right.length)r.right.push(e.right[0]);else for(var l=e.right.length-1;l>0;l-=g)r.right.unshift(e.right[l]);return r}function s(t,e){return{integer:Math.floor(100*t/e),decimal:Number(String(100*t/e%1).charAt(2))}}e.setPage=a,e.reset=h,e.next=l,e.prev=i,e.page=1,h()}function n(t,e){return e.ngpTemplateUrl}var g={templateUrl:n,link:e,restrict:"A",scope:{pager:"=ngpPager"}};return g}var n=t.angular;n.module("ngPager",[]).directive("ngPager",["$http",e])}(window);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
