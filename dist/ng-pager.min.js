!function(t){"use strict";function e(t){function e(e,i,n){function r(t){var e={integerVal:0,decimalVal:0,tear:function(){this.integerVal=Math.floor(t),this.decimalVal=t%1}};return e.tear(),e}function g(t,e){var i={left:0,right:0,ruleOfThirds:function(i){return 100*i/(t+e)},define:function(){this.left=this.ruleOfThirds(t),this.right=this.ruleOfThirds(e)}};return i.define(),i}function h(t,e,i,n){var g={leftInt:0,leftDec:0,rightInt:0,rightDec:0,left:0,right:0,resWantedPages:1===t||t===i?e-2:e-3,calculate:function(){this.leftInt=r(this.resWantedPages*(n.left/100)).integerVal,this.leftDec=r(this.resWantedPages*(n.left/100)).decimalVal,this.rightInt=r(this.resWantedPages*(n.right/100)).integerVal,this.rightDec=r(this.resWantedPages*(n.right/100)).decimalVal;var t={left:this.leftInt,right:this.rightInt};return t.left+t.right!==this.resWantedPages&&(this.leftDec===this.rightDec?t.left>t.right?t.left++:t.right++:this.leftDec>this.rightDec?t.left++:t.right++),t}};return g.calculate()}function a(t,e,i){t=t<0?0:t,t=t>i.length-1?i.length-1:t;var n={left:[],right:[],populate:function(){if(t>0)for(var e=t-1;e>0;e--)this.left.unshift(i[e]);if(t<i.length-1)for(var n=t+1;n<i.length-1;n++)this.right.push(i[n])}},r={left:[],right:[],leftStepping:0,rightStepping:0,step:function(t,e){if(e.left>0){this.leftStepping=Math.floor(t.left.length/e.left);for(var i=t.left[t.left.length-1]+1-this.leftStepping;this.left.length<e.left;i-=this.leftStepping)this.left.unshift(i)}if(e.right>0){this.rightStepping=Math.floor(t.right.length/e.right);for(var n=t.right[0]-1+this.rightStepping;this.right.length<e.right;n+=this.rightStepping)this.right.push(n)}}};n.populate();var a=g(n.left.length,n.right.length),l=h(t+1,e,i.length,a);return r.step(n,l),r.left.unshift(i[0]),r.right.push(i[i.length-1]),t>0&&t<i[i.length]&&r.left.push(i[t]),r.left.concat(r.right)}function l(t,e,i,n){i=isNaN(i)?10:i,n=isNaN(n)?9:n,n%2||(console.log("[INFO]: displaySize of "+n+" forced into "+(n+1)),n++);for(var r=0,g=[],h=0,l=Math.floor(t/i);h<l;h++)g.push(++r);if(t%i!==0&&g.push(++r),g.length>n){var f=a(e-1,n,g);return f}return g}function f(t){e.total=parseInt(t.data||0),e.pageCount=parseInt(n.ngpPageCount),e.pages=l(e.total,e.page,e.pageCount),n.ngpStartPage&&(e.page=parseInt(n.ngpStartPage)||1,e.page>e.pages.length&&(e.page=e.pages.length),e.page<1&&(e.page=1),console.log("Start page: "+e.page))}function s(t){e.page=t,e.pager(t)}function p(){e.page<e.pages.length&&s(++e.page)}function o(){e.page>1&&s(--e.page)}function u(){t.get(n.ngpCountUrl).then(f)}function h(t,e,i){var n=g(e,i.length),r=Math.ceil(t*n.integer/100),h=Math.abs(t-r),a={left:0,right:0};return n.decimal>=5?(a.left=++r,a.right=h):(a.left=r,a.right=++h),a}function g(t,e){return{integer:Math.floor(100*t/e),decimal:Number(String(100*t/e%1).charAt(2))}}e.setPage=s,e.reset=u,e.next=p,e.prev=o,e.page=1,u()}function i(t,e){return e.ngpTemplateUrl}var n={templateUrl:i,link:e,restrict:"A",scope:{pager:"=ngpPager"}};return n}var i=t.angular;i.module("ngPager",[]).directive("ngPager",["$http",e])}(window);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
