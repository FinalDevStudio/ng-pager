!function(t){"use strict";var e=t.angular;e.module("ngPager",[]).directive("ngPager",["$http",function(t){return{templateUrl:function(t,e){return e.ngpTemplateUrl},link:function(g,n,i){function a(t,e,g,n){g=isNaN(g)?10:g,(n=isNaN(n)?9:n)%2||(console.log("[INFO]: displaySize of "+n+" forced into "+(n+1)),n++);for(var i=0,a=[],l=0,p=Math.floor(t/g);l<p;l++)a.push(++i);return t%g!=0&&a.push(++i),a.length>n?r(e-1,n,a):a}function r(t,e,g){t=(t=t<0?0:t)>g.length-1?g.length-1:t;var n={left:[],right:[],populate:function(){var e;if(t>0)for(e=t-1;e>0;e--)this.left.unshift(g[e]);if(t<g.length-1)for(e=t+1;e<g.length-1;e++)this.right.push(g[e])}},i={left:[],right:[],all:[],join:function(){return this.left.unshift(g[0]),this.right.push(g[g.length-1]),t>0&&t+1<g[g.length-1]&&this.left.push(g[t]),this.all=this.left.concat(this.right),this.all}},a={leftStepping:0,rightStepping:0,step:function(t,e){var g;if(e.left>0)for(this.leftStepping=Math.floor(t.left.length/e.left),g=t.left[t.left.length-1]+1-this.leftStepping;i.left.length<e.left;g-=this.leftStepping)i.left.unshift(g);if(e.right>0)for(this.rightStepping=Math.floor(t.right.length/e.right),g=t.right[0]-1+this.rightStepping;i.right.length<e.right;g+=this.rightStepping)i.right.push(g)}};n.populate();var r=p(n.left.length,n.right.length),h=l(t+1,e,g.length,r);return a.step(n,h),i.join()}function l(t,e,g,n){var i={left:h((e=1===t||t===g?e-2:e-3)*(n.left/100)).integerVal,right:h(e*(n.right/100)).integerVal},a=h(e*(n.left/100)).decimalVal,r=h(e*(n.right/100)).decimalVal;return i.left+i.right!==e&&(a===r?i.left>i.right?i.left++:i.right++:a>r?i.left++:i.right++),i}function p(t,e){var g={right:0,left:0,ruleOfThree:function(g){return 100*g/(t+e)},define:function(){this.left=this.ruleOfThree(t),this.right=this.ruleOfThree(e)}};return g.define(),g}function h(t){return{integerVal:Math.floor(t),decimalVal:t%1}}function f(){g.pages=a(g.total,g.page,g.pageCount,g.pagesLimit),g.lastPage=g.page===g.pages[g.pages.length-1],g.firstPage=g.page===g.pages[0]}function s(t){if(g.pagesLimit=parseInt(i.ngpPagesLimit||7),g.total=parseInt(t.data||0),g.pageCount=parseInt(i.ngpPageCount),g.disabled=!1,f(),i.ngpStartPage){g.page=parseInt(i.ngpStartPage)||1;var e=g.pages[g.pages.length-1];g.page>e&&(g.page=e),g.page<1&&(g.page=1),console.log("Start page: "+g.page)}f()}function o(t){t=parseInt(t),console.log("Current scope page:",g.page),console.log("Trying to set page:",t),isNaN(t)||g.page===t||(console.log("New page:",t),g.page=t,g.pager(t),f())}function u(){t.get(i.ngpCountUrl).then(s,e.noop)}g.setPage=o,g.reset=u,g.next=function(){g.page<g.pages[g.pages.length-1]&&o(g.page+1)},g.prev=function(){g.page>g.pages[0]&&o(g.page-1)},g.firstPage=!1,g.lastPage=!1,g.disabled=!0,g.page=1,u()},restrict:"A",scope:{pager:"=ngpPager"}}}])}(window);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5nLXBhZ2VyLmpzIl0sIm5hbWVzIjpbIndpbmRvdyIsIm5nIiwiYW5ndWxhciIsIm1vZHVsZSIsImRpcmVjdGl2ZSIsIiRodHRwIiwidGVtcGxhdGVVcmwiLCIkZWxlbWVudCIsIiRhdHRycyIsIm5ncFRlbXBsYXRlVXJsIiwibGluayIsIiRzY29wZSIsInBhZ2VyIiwiaXRlbXMiLCJjdXJyZW50UGFnZSIsIml0ZW1zUGVyUGFnZSIsImRpc3BsYXlTaXplIiwiaXNOYU4iLCJjb25zb2xlIiwibG9nIiwicGFnZSIsInBhZ2VzIiwiaSIsImwiLCJNYXRoIiwiZmxvb3IiLCJwdXNoIiwibGVuZ3RoIiwicGFnaW5hdGUiLCJjdXJyZW50SW5kZXgiLCJzcGxpdFBhZ2VzIiwibGVmdCIsInJpZ2h0IiwicG9wdWxhdGUiLCJ0aGlzIiwidW5zaGlmdCIsInJlc3VsdHMiLCJhbGwiLCJqb2luIiwiY29uY2F0Iiwic3RlcHBlZFBhZ2VzIiwibGVmdFN0ZXBwaW5nIiwicmlnaHRTdGVwcGluZyIsInN0ZXAiLCJiYWxhbmNlIiwiYmFsYW5jZVBlcmNlbnRzIiwicGVyY2VudCIsImJhbGFuY2VzIiwibGFzdFBhZ2UiLCJwZXJjZW50YWdlcyIsInRlYXJOdW1iZXIiLCJpbnRlZ2VyVmFsIiwibGVmdERlY2ltYWwiLCJkZWNpbWFsVmFsIiwicmlnaHREZWNpbWFsIiwibGVmdExlbmd0aCIsInJpZ2h0TGVuZ3RoIiwicnVsZU9mVGhyZWUiLCJkZWZpbmUiLCJudW1iZXIiLCJnZW5lcmF0ZVBhZ2VzQXJyYXkiLCJ0b3RhbCIsInBhZ2VDb3VudCIsInBhZ2VzTGltaXQiLCJmaXJzdFBhZ2UiLCJvbkNvdW50U3VjY2VzcyIsInJlcyIsInBhcnNlSW50IiwibmdwUGFnZXNMaW1pdCIsImRhdGEiLCJuZ3BQYWdlQ291bnQiLCJkaXNhYmxlZCIsIm5ncFN0YXJ0UGFnZSIsInNldFBhZ2UiLCJyZXNldCIsImdldCIsIm5ncENvdW50VXJsIiwidGhlbiIsIm5vb3AiLCJuZXh0IiwicHJl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LEVBQU9xQyxVQUFXLEVBQ2xCckMsRUFBTzRELFVBQVcsRUFDbEI1RCxFQUFPUyxLQUFPLEVBRWRzRCxLQWtCQU8sU0FBVSxJQUVWQyxPQUNFdEUsTUFBTyxpQkE1VmYsQ0E2V0VaIiwiZmlsZSI6Im5nLXBhZ2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uICh3aW5kb3cpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBuZyA9IHdpbmRvdy5hbmd1bGFyO1xuXG4gIC8qKlxuICAgKiBQYWdpbmF0aW9uIGRpcmVjdGl2ZSBmdW5jdGlvbi5cbiAgICpcbiAgICogQHR5cGUgQW5ndWxhckpTIERpcmVjdGl2ZSBGdW5jdGlvblxuICAgKi9cbiAgZnVuY3Rpb24gbmdQYWdpbmF0aW9uRGlyZWN0aXZlRm4oJGh0dHApIHtcbiAgICAvKipcbiAgICAgKiBQYWdpbmF0aW9uIGRpcmVjdGl2ZSBsaW5rIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHR5cGUgQW5ndWxhckpTIERpcmVjdGl2ZSBMaW5rIEZ1bmN0aW9uXG4gICAgICovXG4gICAgZnVuY3Rpb24gbmdQYWdpbmF0aW9uRGlyZWN0aXZlTGlua0ZuKCRzY29wZSwgJGVsZW1lbnQsICRhdHRycykge1xuICAgICAgLyoqXG4gICAgICAgKiBNYWluIHBhZ2luYXRpb24gZnVuY3Rpb24uIERldGVybWluZSBpZiB0aGUgc21hcnQtcGFnaW5hdGlvbiBhbGdvcml0aG0gaXMgbmVlZGVkIG9yIG5vdC4gRGlzcGxheSBhbGwgcGFnZXMgaWYgbm90LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBpdGVtcyBUb3RhbCBhbW91bnQgb2YgaXRlbXMgdG8gc29ydFxuICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IGN1cnJlbnRQYWdlIE5vbi16ZXJvIGJhc2VkIGluZGV4IGZvciB0aGUgY3VycmVudCBwYWdlXG4gICAgICAgKiBAcGFyYW0ge051bWJlcn0gaXRlbXNQZXJQYWdlIEFtb3VudCBvZiBpdGVtcyB0byBkaXNwbGF5IG9uIGVhY2ggcGFnZSAoRGVmYXVsdDogMTApXG4gICAgICAgKiBAcGFyYW0ge051bWJlcn0gZGlzcGxheVNpemUgTGltaXQgb2YgcGFnZXMgdG8gZGlzcGxheS4gTXVzdCBiZSBhbiBvZGQgbnVtYmVyIChEZWZhdWx0OiA5KVxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtBcnJheX0gTGlzdCBvZiBwYWdlcyB0aGUgcGFnaW5hdGlvbiBlbGVtZW50IHdpbGwgZGlzcGxheVxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBwYWdlcihpdGVtcywgY3VycmVudFBhZ2UsIGl0ZW1zUGVyUGFnZSwgZGlzcGxheVNpemUpIHtcbiAgICAgICAgaXRlbXNQZXJQYWdlID0gKGlzTmFOKGl0ZW1zUGVyUGFnZSkpID8gMTAgOiBpdGVtc1BlclBhZ2U7XG4gICAgICAgIGRpc3BsYXlTaXplID0gKGlzTmFOKGRpc3BsYXlTaXplKSkgPyA5IDogZGlzcGxheVNpemU7XG5cbiAgICAgICAgaWYgKCEoZGlzcGxheVNpemUgJSAyKSkgeyAvLyBDaGVjayBpZiBOT1Qgb2RkXG4gICAgICAgICAgY29uc29sZS5sb2coJ1tJTkZPXTogZGlzcGxheVNpemUgb2YgJyArIGRpc3BsYXlTaXplICsgJyBmb3JjZWQgaW50byAnICsgKGRpc3BsYXlTaXplICsgMSkpO1xuICAgICAgICAgIGRpc3BsYXlTaXplKys7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcGFnZSA9IDA7XG4gICAgICAgIHZhciBwYWdlcyA9IFtdO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gTWF0aC5mbG9vcihpdGVtcyAvIGl0ZW1zUGVyUGFnZSk7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICBwYWdlcy5wdXNoKCsrcGFnZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXRlbXMgJSBpdGVtc1BlclBhZ2UgIT09IDApIHtcbiAgICAgICAgICBwYWdlcy5wdXNoKCsrcGFnZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFnZXMubGVuZ3RoID4gZGlzcGxheVNpemUpIHtcbiAgICAgICAgICB2YXIgc3RlcHBlZFBhZ2VzID0gcGFnaW5hdGUoY3VycmVudFBhZ2UgLSAxLCBkaXNwbGF5U2l6ZSwgcGFnZXMpO1xuICAgICAgICAgIHJldHVybiBzdGVwcGVkUGFnZXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHBhZ2VzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogU21hcnQtcGFnaW5hdGlvbiBhbGdvcml0aG0gZnVuY3Rpb24uXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IGN1cnJlbnRJbmRleCBDdXJyZW50IHBhZ2VcbiAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkaXNwbGF5U2l6ZSBMaW1pdCBvZiBwYWdlcyB0byBkaXNwbGF5LiBNdXN0IGJlIGFuIG9kZCBudW1iZXJcbiAgICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhZ2VzIEFycmF5IG9mIGFsbCBwYWdlc1xuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtBcnJheX0gRmlsdGVyZWQgbGlzdCBvZiBwYWdlcyB0byBkaXNwbGF5XG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIHBhZ2luYXRlKGN1cnJlbnRJbmRleCwgZGlzcGxheVNpemUsIHBhZ2VzKSB7XG4gICAgICAgIGN1cnJlbnRJbmRleCA9IChjdXJyZW50SW5kZXggPCAwKSA/IDAgOiBjdXJyZW50SW5kZXg7XG4gICAgICAgIGN1cnJlbnRJbmRleCA9IChjdXJyZW50SW5kZXggPiAocGFnZXMubGVuZ3RoIC0gMSkpID8gKHBhZ2VzLmxlbmd0aCAtIDEpIDogY3VycmVudEluZGV4O1xuXG4gICAgICAgIHZhciBzcGxpdFBhZ2VzID0ge1xuICAgICAgICAgIGxlZnQ6IFtdLFxuICAgICAgICAgIHJpZ2h0OiBbXSxcblxuICAgICAgICAgIHBvcHVsYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgaTtcblxuICAgICAgICAgICAgaWYgKGN1cnJlbnRJbmRleCA+IDApIHtcbiAgICAgICAgICAgICAgZm9yIChpID0gKGN1cnJlbnRJbmRleCAtIDEpOyBpID4gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sZWZ0LnVuc2hpZnQocGFnZXNbaV0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjdXJyZW50SW5kZXggPCAocGFnZXMubGVuZ3RoIC0gMSkpIHtcbiAgICAgICAgICAgICAgZm9yIChpID0gKGN1cnJlbnRJbmRleCArIDEpOyBpIDwgKHBhZ2VzLmxlbmd0aCAtIDEpOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJpZ2h0LnB1c2gocGFnZXNbaV0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciByZXN1bHRzID0ge1xuICAgICAgICAgIGxlZnQ6IFtdLFxuICAgICAgICAgIHJpZ2h0OiBbXSxcbiAgICAgICAgICBhbGw6IFtdLFxuXG4gICAgICAgICAgam9pbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5sZWZ0LnVuc2hpZnQocGFnZXNbMF0pO1xuICAgICAgICAgICAgdGhpcy5yaWdodC5wdXNoKHBhZ2VzW3BhZ2VzLmxlbmd0aCAtIDFdKTtcblxuICAgICAgICAgICAgaWYgKGN1cnJlbnRJbmRleCA+IDAgJiYgKGN1cnJlbnRJbmRleCArIDEpIDwgcGFnZXNbcGFnZXMubGVuZ3RoIC0gMV0pIHtcbiAgICAgICAgICAgICAgdGhpcy5sZWZ0LnB1c2gocGFnZXNbY3VycmVudEluZGV4XSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuYWxsID0gdGhpcy5sZWZ0LmNvbmNhdCh0aGlzLnJpZ2h0KTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHN0ZXBwZWRQYWdlcyA9IHtcbiAgICAgICAgICBsZWZ0U3RlcHBpbmc6IDAsXG4gICAgICAgICAgcmlnaHRTdGVwcGluZzogMCxcblxuICAgICAgICAgIHN0ZXA6IGZ1bmN0aW9uIChzcGxpdFBhZ2VzLCBiYWxhbmNlKSB7XG4gICAgICAgICAgICB2YXIgaTtcblxuICAgICAgICAgICAgaWYgKGJhbGFuY2UubGVmdCA+IDApIHtcbiAgICAgICAgICAgICAgdGhpcy5sZWZ0U3RlcHBpbmcgPSBNYXRoLmZsb29yKHNwbGl0UGFnZXMubGVmdC5sZW5ndGggLyBiYWxhbmNlLmxlZnQpO1xuXG4gICAgICAgICAgICAgIGZvciAoaSA9IChzcGxpdFBhZ2VzLmxlZnRbc3BsaXRQYWdlcy5sZWZ0Lmxlbmd0aCAtIDFdICsgMSkgLSB0aGlzLmxlZnRTdGVwcGluZzsgcmVzdWx0cy5sZWZ0Lmxlbmd0aCA8IGJhbGFuY2UubGVmdDsgaSA9IChpIC0gdGhpcy5sZWZ0U3RlcHBpbmcpKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0cy5sZWZ0LnVuc2hpZnQoaSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGJhbGFuY2UucmlnaHQgPiAwKSB7XG4gICAgICAgICAgICAgIHRoaXMucmlnaHRTdGVwcGluZyA9IE1hdGguZmxvb3Ioc3BsaXRQYWdlcy5yaWdodC5sZW5ndGggLyBiYWxhbmNlLnJpZ2h0KTtcblxuICAgICAgICAgICAgICBmb3IgKGkgPSAoc3BsaXRQYWdlcy5yaWdodFswXSAtIDEpICsgdGhpcy5yaWdodFN0ZXBwaW5nOyByZXN1bHRzLnJpZ2h0Lmxlbmd0aCA8IGJhbGFuY2UucmlnaHQ7IGkgPSAoaSArIHRoaXMucmlnaHRTdGVwcGluZykpIHtcbiAgICAgICAgICAgICAgICByZXN1bHRzLnJpZ2h0LnB1c2goaSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgc3BsaXRQYWdlcy5wb3B1bGF0ZSgpO1xuXG4gICAgICAgIHZhciBiYWxhbmNlUGVyY2VudHMgPSBwZXJjZW50KHNwbGl0UGFnZXMubGVmdC5sZW5ndGgsIHNwbGl0UGFnZXMucmlnaHQubGVuZ3RoKTtcbiAgICAgICAgdmFyIGJhbGFuY2VzID0gYmFsYW5jZSgoY3VycmVudEluZGV4ICsgMSksIGRpc3BsYXlTaXplLCBwYWdlcy5sZW5ndGgsIGJhbGFuY2VQZXJjZW50cyk7XG5cbiAgICAgICAgc3RlcHBlZFBhZ2VzLnN0ZXAoc3BsaXRQYWdlcywgYmFsYW5jZXMpO1xuXG4gICAgICAgIHZhciBvdXRwdXQgPSByZXN1bHRzLmpvaW4oKTtcblxuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIERldGVybWluZSB0aGUgYmFsYW5jZSBvZiBwYWdlcyB0byB0aGUgbGVmdCBhbmQgcmlnaHQganVkZ2luZyBmcm9tIHRoZSBjdXJyZW50IHBhZ2UgdGhlIHVzZXIgaXMgYXQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IGN1cnJlbnRQYWdlIEN1cnJlbnQgcGFnZSB0aGUgdXNlciBpcyBhdFxuICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IGRpc3BsYXlTaXplIExpbWl0IG9mIHBhZ2VzIHRvIGRpc3BsYXlcbiAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsYXN0UGFnZSBWYWx1ZSBhdCB0aGUgbGFzdCBpbmRleCBvZiB0aGUgcGFnZXMgYXJyYXlcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwZXJjZW50YWdlcyBQZXJjZW50YWdlcyBvYmplY3RcbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBMZWZ0L1JpZ2h0IHJlc3VsdHMgb2JqZWN0XG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIGJhbGFuY2UoY3VycmVudFBhZ2UsIGRpc3BsYXlTaXplLCBsYXN0UGFnZSwgcGVyY2VudGFnZXMpIHtcbiAgICAgICAgZGlzcGxheVNpemUgPSAoY3VycmVudFBhZ2UgPT09IDEgfHwgY3VycmVudFBhZ2UgPT09IGxhc3RQYWdlKSA/IChkaXNwbGF5U2l6ZSAtIDIpIDogKGRpc3BsYXlTaXplIC0gMyk7XG5cbiAgICAgICAgdmFyIHJlc3VsdHMgPSB7XG4gICAgICAgICAgbGVmdDogdGVhck51bWJlcihkaXNwbGF5U2l6ZSAqIChwZXJjZW50YWdlcy5sZWZ0IC8gMTAwKSkuaW50ZWdlclZhbCxcbiAgICAgICAgICByaWdodDogdGVhck51bWJlcihkaXNwbGF5U2l6ZSAqIChwZXJjZW50YWdlcy5yaWdodCAvIDEwMCkpLmludGVnZXJWYWxcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgbGVmdERlY2ltYWwgPSB0ZWFyTnVtYmVyKGRpc3BsYXlTaXplICogKHBlcmNlbnRhZ2VzLmxlZnQgLyAxMDApKS5kZWNpbWFsVmFsO1xuICAgICAgICB2YXIgcmlnaHREZWNpbWFsID0gdGVhck51bWJlcihkaXNwbGF5U2l6ZSAqIChwZXJjZW50YWdlcy5yaWdodCAvIDEwMCkpLmRlY2ltYWxWYWw7XG5cbiAgICAgICAgaWYgKChyZXN1bHRzLmxlZnQgKyByZXN1bHRzLnJpZ2h0KSAhPT0gZGlzcGxheVNpemUpIHtcbiAgICAgICAgICBpZiAobGVmdERlY2ltYWwgPT09IHJpZ2h0RGVjaW1hbCkge1xuICAgICAgICAgICAgaWYgKHJlc3VsdHMubGVmdCA+IHJlc3VsdHMucmlnaHQpIHtcbiAgICAgICAgICAgICAgcmVzdWx0cy5sZWZ0Kys7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXN1bHRzLnJpZ2h0Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChsZWZ0RGVjaW1hbCA+IHJpZ2h0RGVjaW1hbCkge1xuICAgICAgICAgICAgICByZXN1bHRzLmxlZnQrKztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlc3VsdHMucmlnaHQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBEZXRlcm1pbmUgcGVyY2VudGFnZSBvZiB0d28gYXJyYXlzIHRha2luZyBib3RoIHN1bW1lZCBhcyB0b3RhbC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0FycmF5fSBsZWZ0TGVuZ3RoIExlZnQgYXJyYXlcbiAgICAgICAqIEBwYXJhbSB7QXJyYXl9IHJpZ2h0TGVuZ3RoIFJpZ2h0IGFycmF5XG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBwZXJjZW50YWdlcyBvYmplY3RcbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gcGVyY2VudChsZWZ0TGVuZ3RoLCByaWdodExlbmd0aCkge1xuICAgICAgICB2YXIgcGVyY2VudGFnZXMgPSB7XG4gICAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgICAgbGVmdDogMCxcblxuICAgICAgICAgIHJ1bGVPZlRocmVlOiBmdW5jdGlvbiAobGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gKDEwMCAqIGxlbmd0aCkgLyAobGVmdExlbmd0aCArIHJpZ2h0TGVuZ3RoKTtcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgZGVmaW5lOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLmxlZnQgPSB0aGlzLnJ1bGVPZlRocmVlKGxlZnRMZW5ndGgpO1xuICAgICAgICAgICAgdGhpcy5yaWdodCA9IHRoaXMucnVsZU9mVGhyZWUocmlnaHRMZW5ndGgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBwZXJjZW50YWdlcy5kZWZpbmUoKTtcblxuICAgICAgICByZXR1cm4gcGVyY2VudGFnZXM7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogU2VwYXJhdGUgYSBudW1iZXIgaW50byBpdHMgaW50ZWdlciBhbmQgZGVjaW1hbCBwYXJ0c1xuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBpbnB1dE51bWJlciBOdW1iZXIgdG8gdGVhclxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFRvcm4gbnVtYmVyIG9iamVjdFxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiB0ZWFyTnVtYmVyKG51bWJlcikge1xuICAgICAgICB2YXIgdG9ybk51bWJlciA9IHtcbiAgICAgICAgICBpbnRlZ2VyVmFsOiBNYXRoLmZsb29yKG51bWJlciksXG4gICAgICAgICAgZGVjaW1hbFZhbDogKG51bWJlciAlIDEpXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHRvcm5OdW1iZXI7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogUmUtZ2VuZXJhdGUgb24gcmVmcmVzaCBvciBwYWdlIGNoYW5nZVxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBnZW5lcmF0ZVBhZ2VzQXJyYXkoKSB7XG4gICAgICAgICRzY29wZS5wYWdlcyA9IHBhZ2VyKCRzY29wZS50b3RhbCwgJHNjb3BlLnBhZ2UsICRzY29wZS5wYWdlQ291bnQsICRzY29wZS5wYWdlc0xpbWl0KTtcblxuICAgICAgICAkc2NvcGUubGFzdFBhZ2UgPSAkc2NvcGUucGFnZSA9PT0gJHNjb3BlLnBhZ2VzWyRzY29wZS5wYWdlcy5sZW5ndGggLSAxXTtcbiAgICAgICAgJHNjb3BlLmZpcnN0UGFnZSA9ICRzY29wZS5wYWdlID09PSAkc2NvcGUucGFnZXNbMF07XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogT24gY291bnQgcmVxdWVzdCBzdWNjZXNzLlxuICAgICAgICpcbiAgICAgICAqIEB0eXBlICRodHRwIHRoZW4gY2FsbGJhY2suXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIG9uQ291bnRTdWNjZXNzKHJlcykge1xuICAgICAgICAkc2NvcGUucGFnZXNMaW1pdCA9IHBhcnNlSW50KCRhdHRycy5uZ3BQYWdlc0xpbWl0IHx8IDcpO1xuICAgICAgICAkc2NvcGUudG90YWwgPSBwYXJzZUludChyZXMuZGF0YSB8fCAwKTtcbiAgICAgICAgJHNjb3BlLnBhZ2VDb3VudCA9IHBhcnNlSW50KCRhdHRycy5uZ3BQYWdlQ291bnQpO1xuICAgICAgICAkc2NvcGUuZGlzYWJsZWQgPSBmYWxzZTtcblxuICAgICAgICBnZW5lcmF0ZVBhZ2VzQXJyYXkoKTtcblxuICAgICAgICBpZiAoJGF0dHJzLm5ncFN0YXJ0UGFnZSkge1xuICAgICAgICAgICRzY29wZS5wYWdlID0gcGFyc2VJbnQoJGF0dHJzLm5ncFN0YXJ0UGFnZSkgfHwgMTtcblxuICAgICAgICAgIHZhciBsYXN0UGFnZSA9ICRzY29wZS5wYWdlc1skc2NvcGUucGFnZXMubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgICBpZiAoJHNjb3BlLnBhZ2UgPiBsYXN0UGFnZSkge1xuICAgICAgICAgICAgJHNjb3BlLnBhZ2UgPSBsYXN0UGFnZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoJHNjb3BlLnBhZ2UgPCAxKSB7XG4gICAgICAgICAgICAkc2NvcGUucGFnZSA9IDE7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc29sZS5sb2coJ1N0YXJ0IHBhZ2U6ICcgKyAkc2NvcGUucGFnZSk7XG4gICAgICAgIH1cblxuICAgICAgICBnZW5lcmF0ZVBhZ2VzQXJyYXkoKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBTZXRzIHRoZSBjdXJyZW50IHBhZ2UuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHBhZ2UgVGhlIHBhZ2UgbnVtYmVyIHRvIHNldC5cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gc2V0UGFnZShwYWdlKSB7XG4gICAgICAgIHBhZ2UgPSBwYXJzZUludChwYWdlKTtcblxuICAgICAgICBjb25zb2xlLmxvZygnQ3VycmVudCBzY29wZSBwYWdlOicsICRzY29wZS5wYWdlKTtcbiAgICAgICAgY29uc29sZS5sb2coJ1RyeWluZyB0byBzZXQgcGFnZTonLCBwYWdlKTtcblxuICAgICAgICBpZiAoIWlzTmFOKHBhZ2UpICYmICRzY29wZS5wYWdlICE9PSBwYWdlKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ05ldyBwYWdlOicsIHBhZ2UpO1xuXG4gICAgICAgICAgJHNjb3BlLnBhZ2UgPSBwYWdlO1xuICAgICAgICAgICRzY29wZS5wYWdlcihwYWdlKTtcblxuICAgICAgICAgIGdlbmVyYXRlUGFnZXNBcnJheSgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogR29lcyB0byB0aGUgbmV4dCBwYWdlLlxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICBpZiAoJHNjb3BlLnBhZ2UgPCAkc2NvcGUucGFnZXNbJHNjb3BlLnBhZ2VzLmxlbmd0aCAtIDFdKSB7XG4gICAgICAgICAgc2V0UGFnZSgkc2NvcGUucGFnZSArIDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogR29lcyB0byB0aGUgcHJldmlvdXMgcGFnZS5cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gcHJldigpIHtcbiAgICAgICAgaWYgKCRzY29wZS5wYWdlID4gJHNjb3BlLnBhZ2VzWzBdKSB7XG4gICAgICAgICAgc2V0UGFnZSgkc2NvcGUucGFnZSAtIDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogUmVzZXRzIHRoZSBjb3VudGVyIGFuZCBmZXRjaGVzIHRoZSB0b3RhbCBjb3VudCBhZ2Fpbi5cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgICAgICRodHRwLmdldCgkYXR0cnMubmdwQ291bnRVcmwpXG4gICAgICAgICAgLnRoZW4ob25Db3VudFN1Y2Nlc3MsIG5nLm5vb3ApO1xuICAgICAgfVxuXG4gICAgICAkc2NvcGUuc2V0UGFnZSA9IHNldFBhZ2U7XG4gICAgICAkc2NvcGUucmVzZXQgPSByZXNldDtcbiAgICAgICRzY29wZS5uZXh0ID0gbmV4dDtcbiAgICAgICRzY29wZS5wcmV2ID0gcHJldjtcblxuICAgICAgJHNjb3BlLmZpcnN0UGFnZSA9IGZhbHNlO1xuICAgICAgJHNjb3BlLmxhc3RQYWdlID0gZmFsc2U7XG4gICAgICAkc2NvcGUuZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgJHNjb3BlLnBhZ2UgPSAxO1xuXG4gICAgICByZXNldCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhZ2luYXRpb24gZGlyZWN0aXZlIHRlbXBsYXRlIFVSTCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEB0eXBlIEFuZ3VsYXJKUyBEaXJlY3RpdmUgVGVtcGxhdGUgVVJMIEZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5nUGFnaW5hdGlvbkRpcmVjdGl2ZVRlbXBsYXRlVXJsRm4oJGVsZW1lbnQsICRhdHRycykge1xuICAgICAgcmV0dXJuICRhdHRycy5uZ3BUZW1wbGF0ZVVybDtcbiAgICB9XG5cbiAgICAvKiBQYWdpbmF0aW9uIGRpcmVjdGl2ZSBkZWZpbml0aW9uICovXG4gICAgdmFyIG5nUGFnaW5hdGlvbkRpcmVjdGl2ZURlZiA9IHtcbiAgICAgIHRlbXBsYXRlVXJsOiBuZ1BhZ2luYXRpb25EaXJlY3RpdmVUZW1wbGF0ZVVybEZuLFxuXG4gICAgICBsaW5rOiBuZ1BhZ2luYXRpb25EaXJlY3RpdmVMaW5rRm4sXG5cbiAgICAgIHJlc3RyaWN0OiAnQScsXG5cbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIHBhZ2VyOiAnPW5ncFBhZ2VyJ1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gbmdQYWdpbmF0aW9uRGlyZWN0aXZlRGVmO1xuICB9XG5cbiAgLyogRGVmaW5lIHRoZSBBbmd1bGFySlMgbW9kdWxlICovXG4gIG5nLm1vZHVsZSgnbmdQYWdlcicsIFtdKVxuXG4gICAgLyogRGVmaW5lIHRoZSBBbmd1bGFySlMgZGlyZWN0aXZlICovXG4gICAgLmRpcmVjdGl2ZSgnbmdQYWdlcicsIFtcbiAgICAgICckaHR0cCcsXG5cbiAgICAgIG5nUGFnaW5hdGlvbkRpcmVjdGl2ZUZuXG4gICAgXSk7XG5cbn0od2luZG93KSk7Il19
