!function(t){"use strict";function e(t){function e(e,i,n){function g(t,e,i,n){i=isNaN(i)?10:i,n=isNaN(n)?9:n,n%2||(console.log("[INFO]: displaySize of "+n+" forced into "+(n+1)),n++);for(var g=0,h=[],a=0,l=Math.floor(t/i);a<l;a++)h.push(++g);if(t%i!==0&&h.push(++g),h.length>n){var f=r(e-1,n,h);return f}return h}function r(t,e,i){t=t<0?0:t,t=t>i.length-1?i.length-1:t;var n={left:[],right:[],populate:function(){var e;if(t>0)for(e=t-1;e>0;e--)this.left.unshift(i[e]);if(t<i.length-1)for(e=t+1;e<i.length-1;e++)this.right.push(i[e])}},g={left:[],right:[],leftStepping:0,rightStepping:0,step:function(t,e){var i;if(e.left>0)for(this.leftStepping=Math.floor(t.left.length/e.left),i=t.left[t.left.length-1]+1-this.leftStepping;this.left.length<e.left;i-=this.leftStepping)this.left.unshift(i);if(e.right>0)for(this.rightStepping=Math.floor(t.right.length/e.right),i=t.right[0]-1+this.rightStepping;this.right.length<e.right;i+=this.rightStepping)this.right.push(i)}};n.populate();var r=a(n.left.length,n.right.length),l=h(t+1,e,i.length,r);return g.step(n,l),g.left.unshift(i[0]),g.right.push(i[i.length-1]),t>0&&t<i[i.length-1]&&g.left.push(i[t]),g.left.concat(g.right)}function h(t,e,i,n){var g={leftInt:0,leftDec:0,rightInt:0,rightDec:0,left:0,right:0,resWantedPages:1===t||t===i?e-2:e-3,calculate:function(){this.leftInt=l(this.resWantedPages*(n.left/100)).integerVal,this.leftDec=l(this.resWantedPages*(n.left/100)).decimalVal,this.rightInt=l(this.resWantedPages*(n.right/100)).integerVal,this.rightDec=l(this.resWantedPages*(n.right/100)).decimalVal;var t={left:this.leftInt,right:this.rightInt};return t.left+t.right!==this.resWantedPages&&(this.leftDec===this.rightDec?t.left>t.right?t.left++:t.right++:this.leftDec>this.rightDec?t.left++:t.right++),t}};return g.calculate()}function a(t,e){var i={left:0,right:0,ruleOfThree:function(i){return 100*i/(t+e)},define:function(){this.left=this.ruleOfThree(t),this.right=this.ruleOfThree(e)}};return i.define(),i}function l(t){var e={integerVal:0,decimalVal:0,tear:function(){this.integerVal=Math.floor(t),this.decimalVal=t%1}};return e.tear(),e}function f(t){e.total=parseInt(t.data||0),e.pageCount=parseInt(n.ngpPageCount),e.pages=g(e.total,e.page,e.pageCount),n.ngpStartPage&&(e.page=parseInt(n.ngpStartPage)||1,e.page>e.pages.length&&(e.page=e.pages.length),e.page<1&&(e.page=1),console.log("Start page: "+e.page))}function s(t){e.page=t,e.pager(t),e.pages=g(e.total,e.page,e.pageCount)}function p(){e.page<e.pages[e.pages.length-1]&&s(++e.page)}function o(){e.page>1&&s(--e.page)}function u(){t.get(n.ngpCountUrl).then(f)}e.setPage=s,e.reset=u,e.next=p,e.prev=o,e.page=1,u()}function i(t,e){return e.ngpTemplateUrl}var n={templateUrl:i,link:e,restrict:"A",scope:{pager:"=ngpPager"}};return n}var i=t.angular;i.module("ngPager",[]).directive("ngPager",["$http",e])}(window);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
