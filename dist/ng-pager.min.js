!function(t){"use strict";function e(t){function e(e,n,a){function g(t){e.total=parseInt(t.data||0),e.pageCount=parseInt(a.ngpPageCount),e.pages=i(),console.log("PAGES:",e.pages),a.ngpStartPage&&(e.page=parseInt(a.ngpStartPage)||1,e.page>e.pages.length&&(e.page=e.pages.length),e.page<1&&(e.page=1),console.log("Start page: "+e.page))}function r(t){e.page=t,e.pager(t)}function p(){e.page<e.pages.length&&r(++e.page)}function l(){e.page>1&&r(--e.page)}function o(){t.get(a.ngpCountUrl).then(g)}function i(){for(var t=isNaN(t)?8:t,n=isNaN(n)?10:n,a=[],g=[],r=0,p=0,l=Math.floor(e.total/e.pageCount);p<l;p++)a.push(++r);return e.total%e.pageCount&&a.push(++r),a.length>7?g=u(e.page,t,a):a}function u(t,e,n){for(var a=[],g=[],r=[],p=[],l=--t,o=--l;o>=0;o--)a.unshift(n[o]);for(var i=++l;i<n.length;i++)g.push(n[i]);var u=f(e-2,a.length,n),s=h(u,a,g);r=s.left,r.push(n[l]),p=s.right;var c=r.concat(p);return c.length>e&&c.splice(1,1),c}function h(t,e,n){for(var a=Math.ceil(e.length/t.left),g=Math.ceil(n.length/t.right),r=[],p=[],l=0;l<e.length;l+=a)r.push(e[l]);if(1===n.length)p.push(n[0]);else for(var o=n.length-1;o>0;o-=g)p.unshift(n[o]);var i={left:r,right:p};return i}function f(t,e,n){var a=s(e,n.length),g=Math.ceil(t*a.integer/100),r=Math.abs(t-g),p={left:0,right:0};return a.decimal>=5?(p.left=++g,p.right=r):(p.left=g,p.right=++r),p}function s(t,e){return{integer:Math.floor(100*t/e),decimal:Number(String(100*t/e%1).charAt(2))}}e.setPage=r,e.reset=o,e.next=p,e.prev=l,e.pages=i,e.page=1,o()}function n(t,e){return e.ngpTemplateUrl}var a={templateUrl:n,link:e,restrict:"A",scope:{pager:"=ngpPager"}};return a}var n=t.angular;n.module("ngPager",[]).directive("ngPager",["$http",e])}(window);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
