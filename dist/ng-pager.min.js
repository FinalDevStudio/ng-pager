!function(t){"use strict";function e(t){function e(e,n,i){function g(t,e,n,i){n=isNaN(n)?10:n,i=isNaN(i)?9:i,i%2||(console.log("[INFO]: displaySize of "+i+" forced into "+(i+1)),i++);for(var g=0,l=[],a=0,h=Math.floor(t/n);a<h;a++)l.push(++g);if(t%n!==0&&l.push(++g),l.length>i){var f=r(e-1,i,l);return f}return l}function r(t,e,n){t=t<0?0:t,t=t>n.length-1?n.length-1:t;var i={left:[],right:[],populate:function(){var e;if(t>0)for(e=t-1;e>0;e--)this.left.unshift(n[e]);if(t<n.length-1)for(e=t+1;e<n.length-1;e++)this.right.push(n[e])}},g={left:[],right:[],all:[],join:function(){return this.left.unshift(n[0]),this.right.push(n[n.length-1]),t>0&&t+1<n[n.length-1]&&this.left.push(n[t]),this.all=this.left.concat(this.right),this.all}},r={leftStepping:0,rightStepping:0,step:function(t,e){var n;if(e.left>0)for(this.leftStepping=Math.floor(t.left.length/e.left),n=t.left[t.left.length-1]+1-this.leftStepping;g.left.length<e.left;n-=this.leftStepping)g.left.unshift(n);if(e.right>0)for(this.rightStepping=Math.floor(t.right.length/e.right),n=t.right[0]-1+this.rightStepping;g.right.length<e.right;n+=this.rightStepping)g.right.push(n)}};i.populate();var h=a(i.left.length,i.right.length),f=l(t+1,e,n.length,h);r.step(i,f);var p=g.join();return p}function l(t,e,n,i){e=1===t||t===n?e-2:e-3;var g={left:h(e*(i.left/100)).integerVal,right:h(e*(i.right/100)).integerVal},r=h(e*(i.left/100)).decimalVal,l=h(e*(i.right/100)).decimalVal;return g.left+g.right!==e&&(r===l?g.left>g.right?g.left++:g.right++:r>l?g.left++:g.right++),g}function a(t,e){var n={left:0,right:0,ruleOfThree:function(n){return 100*n/(t+e)},define:function(){this.left=this.ruleOfThree(t),this.right=this.ruleOfThree(e)}};return n.define(),n}function h(t){var e={integerVal:Math.floor(t),decimalVal:t%1};return e}function f(){e.pages=g(e.total,e.page,e.pageCount,e.pagesLimit)}function p(t){if(e.pagesLimit=parseInt(i.ngpPagesLimit||7),e.total=parseInt(t.data||0),e.pageCount=parseInt(i.ngpPageCount),f(),i.ngpStartPage){e.page=parseInt(i.ngpStartPage)||1;var n=e.pages[e.pages.length-1];e.page>n&&(e.page=n),e.page<1&&(e.page=1),console.log("Start page: "+e.page)}}function o(t){e.page=t,e.pager(t),f()}function s(){e.page<e.pages[e.pages.length-1]&&o(++e.page)}function u(){e.page>1&&o(--e.page)}function c(){t.get(i.ngpCountUrl).then(p)}e.setPage=o,e.reset=c,e.next=s,e.prev=u,e.page=1,c()}function n(t,e){return e.ngpTemplateUrl}var i={templateUrl:n,link:e,restrict:"A",scope:{pager:"=ngpPager"}};return i}var n=t.angular;n.module("ngPager",[]).directive("ngPager",["$http",e])}(window);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
