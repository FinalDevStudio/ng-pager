!function(t){"use strict";var e=t.angular;e.module("ngPager",[]).directive("ngPager",["$http",function(t){return{templateUrl:function(t,e){return e.ngpTemplateUrl},link:function(g,n,i){function r(t,e,g,n){g=isNaN(g)?10:g,(n=isNaN(n)?9:n)%2||(console.log("[INFO]: displaySize of "+n+" forced into "+(n+1)),n++);for(var i=0,r=[],l=0,p=Math.floor(t/g);l<p;l++)r.push(++i);return t%g!=0&&r.push(++i),r.length>n?a(e-1,n,r):r}function a(t,e,g){t=(t=t<0?0:t)>g.length-1?g.length-1:t;var n={left:[],right:[],populate:function(){var e;if(t>0)for(e=t-1;e>0;e--)this.left.unshift(g[e]);if(t<g.length-1)for(e=t+1;e<g.length-1;e++)this.right.push(g[e])}},i={left:[],right:[],all:[],join:function(){return this.left.unshift(g[0]),this.right.push(g[g.length-1]),t>0&&t+1<g[g.length-1]&&this.left.push(g[t]),this.all=this.left.concat(this.right),this.all}},r={leftStepping:0,rightStepping:0,step:function(t,e){var g;if(e.left>0)for(this.leftStepping=Math.floor(t.left.length/e.left),g=t.left[t.left.length-1]+1-this.leftStepping;i.left.length<e.left;g-=this.leftStepping)i.left.unshift(g);if(e.right>0)for(this.rightStepping=Math.floor(t.right.length/e.right),g=t.right[0]-1+this.rightStepping;i.right.length<e.right;g+=this.rightStepping)i.right.push(g)}};n.populate();var a=p(n.left.length,n.right.length),h=l(t+1,e,g.length,a);return r.step(n,h),i.join()}function l(t,e,g,n){var i={left:h((e=1===t||t===g?e-2:e-3)*(n.left/100)).integerVal,right:h(e*(n.right/100)).integerVal},r=h(e*(n.left/100)).decimalVal,a=h(e*(n.right/100)).decimalVal;return i.left+i.right!==e&&(r===a?i.left>i.right?i.left++:i.right++:r>a?i.left++:i.right++),i}function p(t,e){var g={right:0,left:0,ruleOfThree:function(g){return 100*g/(t+e)},define:function(){this.left=this.ruleOfThree(t),this.right=this.ruleOfThree(e)}};return g.define(),g}function h(t){return{integerVal:Math.floor(t),decimalVal:t%1}}function f(){g.pages=r(g.total,g.page,g.pageCount,g.pagesLimit),g.lastPage=g.page===g.pages[g.pages.length-1],g.firstPage=g.page===g.pages[0]}function o(t){if(g.pagesLimit=parseInt(i.ngpPagesLimit)||7,g.pageCount=parseInt(i.ngpPageCount)||10,g.total=parseInt(t.data)||0,f(),i.ngpStartPage){g.page=parseInt(i.ngpStartPage)||1;var e=g.pages[g.pages.length-1];g.page>e&&(g.page=e),g.page<1&&(g.page=1),console.log("Start page: "+g.page)}f()}function s(t){t=parseInt(t),console.log("Current scope page:",g.page),console.log("Trying to set page:",t),isNaN(t)||g.page===t||(console.log("New page:",t),g.page=t,g.pager(t),f())}function u(){t.get(i.ngpCountUrl).then(o,e.noop)}g.setPage=s,g.reset=u,g.next=function(){g.page<g.pages[g.pages.length-1]&&s(g.page+1)},g.prev=function(){g.page>g.pages[0]&&s(g.page-1)},g.firstPage=!1,g.lastPage=!1,g.pages=[],g.page=1,u()},restrict:"A",scope:{pager:"=ngpPager"}}}])}(window);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5nLXBhZ2VyLmpzIl0sIm5hbWVzIjpbIndpbmRvdyIsIm5nIiwiYW5ndWxhciIsIm1vZHVsZSIsImRpcmVjdGl2ZSIsIiRodHRwIiwidGVtcGxhdGVVcmwiLCIkZWxlbWVudCIsIiRhdHRycyIsIm5ncFRlbXBsYXRlVXJsIiwibGluayIsIiRzY29wZSIsInBhZ2VyIiwiaXRlbXMiLCJjdXJyZW50UGFnZSIsIml0ZW1zUGVyUGFnZSIsImRpc3BsYXlTaXplIiwiaXNOYU4iLCJjb25zb2xlIiwibG9nIiwicGFnZSIsInBhZ2VzIiwiaSIsImwiLCJNYXRoIiwiZmxvb3IiLCJwdXNoIiwibGVuZ3RoIiwicGFnaW5hdGUiLCJjdXJyZW50SW5kZXgiLCJzcGxpdFBhZ2VzIiwibGVmdCIsInJpZ2h0IiwicG9wdWxhdGUiLCJ0aGlzIiwidW5zaGlmdCIsInJlc3VsdHMiLCJhbGwiLCJqb2luIiwiY29uY2F0Iiwic3RlcHBlZFBhZ2VzIiwibGVmdFN0ZXBwaW5nIiwicmlnaHRTdGVwcGluZyIsInN0ZXAiLCJiYWxhbmNlIiwiYmFsYW5jZVBlcmNlbnRzIiwicGVyY2VudCIsImJhbGFuY2VzIiwibGFzdFBhZ2UiLCJwZXJjZW50YWdlcyIsInRlYXJOdW1iZXIiLCJpbnRlZ2VyVmFsIiwibGVmdERlY2ltYWwiLCJkZWNpbWFsVmFsIiwicmlnaHREZWNpbWFsIiwibGVmdExlbmd0aCIsInJpZ2h0TGVuZ3RoIiwicnVsZU9mVGhyZWUiLCJkZWZpbmUiLCJudW1iZXIiLCJnZW5lcmF0ZVBhZ2VzQXJyYXkiLCJ0b3RhbCIsInBhZ2VDb3VudCIsInBhZ2VzTGltaXQiLCJmaXJzdFBhZ2UiLCJvbkNvdW50U3VjY2VzcyIsInJlcyIsInBhcnNlSW50IiwibmdwUGFnZXNMaW1pdCIsIm5ncFBhZ2VDb3VudCIsImRhdGEiLCJuZ3BTdGFydFBhZ2UiLCJzZXRQYWdlIiwicmVzZXQiLCJnZXQiLCJuZ3BDb3VudFVybCIsInRoZW4iLCJub29wIiwibmV4dCIsInByZXYiLCJyZXN0cmlj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T1UsU0FDUFYsRUFBT1MsS0FBTyxFQUVkcUQsS0FrQkFPLFNBQVUsSUFFVkMsT0FDRXJFLE1BQU8saUJBM1ZmLENBNFdFWiIsImZpbGUiOiJuZy1wYWdlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAod2luZG93KSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgbmcgPSB3aW5kb3cuYW5ndWxhcjtcblxuICAvKipcbiAgICogUGFnaW5hdGlvbiBkaXJlY3RpdmUgZnVuY3Rpb24uXG4gICAqXG4gICAqIEB0eXBlIEFuZ3VsYXJKUyBEaXJlY3RpdmUgRnVuY3Rpb25cbiAgICovXG4gIGZ1bmN0aW9uIG5nUGFnaW5hdGlvbkRpcmVjdGl2ZUZuKCRodHRwKSB7XG4gICAgLyoqXG4gICAgICogUGFnaW5hdGlvbiBkaXJlY3RpdmUgbGluayBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEB0eXBlIEFuZ3VsYXJKUyBEaXJlY3RpdmUgTGluayBGdW5jdGlvblxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5nUGFnaW5hdGlvbkRpcmVjdGl2ZUxpbmtGbigkc2NvcGUsICRlbGVtZW50LCAkYXR0cnMpIHtcbiAgICAgIC8qKlxuICAgICAgICogTWFpbiBwYWdpbmF0aW9uIGZ1bmN0aW9uLiBEZXRlcm1pbmUgaWYgdGhlIHNtYXJ0LXBhZ2luYXRpb24gYWxnb3JpdGhtIGlzIG5lZWRlZCBvciBub3QuIERpc3BsYXkgYWxsIHBhZ2VzIGlmIG5vdC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge051bWJlcn0gaXRlbXMgVG90YWwgYW1vdW50IG9mIGl0ZW1zIHRvIHNvcnRcbiAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjdXJyZW50UGFnZSBOb24temVybyBiYXNlZCBpbmRleCBmb3IgdGhlIGN1cnJlbnQgcGFnZVxuICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IGl0ZW1zUGVyUGFnZSBBbW91bnQgb2YgaXRlbXMgdG8gZGlzcGxheSBvbiBlYWNoIHBhZ2UgKERlZmF1bHQ6IDEwKVxuICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IGRpc3BsYXlTaXplIExpbWl0IG9mIHBhZ2VzIHRvIGRpc3BsYXkuIE11c3QgYmUgYW4gb2RkIG51bWJlciAoRGVmYXVsdDogOSlcbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7QXJyYXl9IExpc3Qgb2YgcGFnZXMgdGhlIHBhZ2luYXRpb24gZWxlbWVudCB3aWxsIGRpc3BsYXlcbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gcGFnZXIoaXRlbXMsIGN1cnJlbnRQYWdlLCBpdGVtc1BlclBhZ2UsIGRpc3BsYXlTaXplKSB7XG4gICAgICAgIGl0ZW1zUGVyUGFnZSA9IChpc05hTihpdGVtc1BlclBhZ2UpKSA/IDEwIDogaXRlbXNQZXJQYWdlO1xuICAgICAgICBkaXNwbGF5U2l6ZSA9IChpc05hTihkaXNwbGF5U2l6ZSkpID8gOSA6IGRpc3BsYXlTaXplO1xuXG4gICAgICAgIGlmICghKGRpc3BsYXlTaXplICUgMikpIHsgLy8gQ2hlY2sgaWYgTk9UIG9kZFxuICAgICAgICAgIGNvbnNvbGUubG9nKCdbSU5GT106IGRpc3BsYXlTaXplIG9mICcgKyBkaXNwbGF5U2l6ZSArICcgZm9yY2VkIGludG8gJyArIChkaXNwbGF5U2l6ZSArIDEpKTtcbiAgICAgICAgICBkaXNwbGF5U2l6ZSsrO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBhZ2UgPSAwO1xuICAgICAgICB2YXIgcGFnZXMgPSBbXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IE1hdGguZmxvb3IoaXRlbXMgLyBpdGVtc1BlclBhZ2UpOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgcGFnZXMucHVzaCgrK3BhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGl0ZW1zICUgaXRlbXNQZXJQYWdlICE9PSAwKSB7XG4gICAgICAgICAgcGFnZXMucHVzaCgrK3BhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhZ2VzLmxlbmd0aCA+IGRpc3BsYXlTaXplKSB7XG4gICAgICAgICAgdmFyIHN0ZXBwZWRQYWdlcyA9IHBhZ2luYXRlKGN1cnJlbnRQYWdlIC0gMSwgZGlzcGxheVNpemUsIHBhZ2VzKTtcbiAgICAgICAgICByZXR1cm4gc3RlcHBlZFBhZ2VzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBwYWdlcztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFNtYXJ0LXBhZ2luYXRpb24gYWxnb3JpdGhtIGZ1bmN0aW9uLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjdXJyZW50SW5kZXggQ3VycmVudCBwYWdlXG4gICAgICAgKiBAcGFyYW0ge051bWJlcn0gZGlzcGxheVNpemUgTGltaXQgb2YgcGFnZXMgdG8gZGlzcGxheS4gTXVzdCBiZSBhbiBvZGQgbnVtYmVyXG4gICAgICAgKiBAcGFyYW0ge0FycmF5fSBwYWdlcyBBcnJheSBvZiBhbGwgcGFnZXNcbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7QXJyYXl9IEZpbHRlcmVkIGxpc3Qgb2YgcGFnZXMgdG8gZGlzcGxheVxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBwYWdpbmF0ZShjdXJyZW50SW5kZXgsIGRpc3BsYXlTaXplLCBwYWdlcykge1xuICAgICAgICBjdXJyZW50SW5kZXggPSAoY3VycmVudEluZGV4IDwgMCkgPyAwIDogY3VycmVudEluZGV4O1xuICAgICAgICBjdXJyZW50SW5kZXggPSAoY3VycmVudEluZGV4ID4gKHBhZ2VzLmxlbmd0aCAtIDEpKSA/IChwYWdlcy5sZW5ndGggLSAxKSA6IGN1cnJlbnRJbmRleDtcblxuICAgICAgICB2YXIgc3BsaXRQYWdlcyA9IHtcbiAgICAgICAgICBsZWZ0OiBbXSxcbiAgICAgICAgICByaWdodDogW10sXG5cbiAgICAgICAgICBwb3B1bGF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGk7XG5cbiAgICAgICAgICAgIGlmIChjdXJyZW50SW5kZXggPiAwKSB7XG4gICAgICAgICAgICAgIGZvciAoaSA9IChjdXJyZW50SW5kZXggLSAxKTsgaSA+IDA7IGktLSkge1xuICAgICAgICAgICAgICAgIHRoaXMubGVmdC51bnNoaWZ0KHBhZ2VzW2ldKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY3VycmVudEluZGV4IDwgKHBhZ2VzLmxlbmd0aCAtIDEpKSB7XG4gICAgICAgICAgICAgIGZvciAoaSA9IChjdXJyZW50SW5kZXggKyAxKTsgaSA8IChwYWdlcy5sZW5ndGggLSAxKTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yaWdodC5wdXNoKHBhZ2VzW2ldKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgcmVzdWx0cyA9IHtcbiAgICAgICAgICBsZWZ0OiBbXSxcbiAgICAgICAgICByaWdodDogW10sXG4gICAgICAgICAgYWxsOiBbXSxcblxuICAgICAgICAgIGpvaW46IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMubGVmdC51bnNoaWZ0KHBhZ2VzWzBdKTtcbiAgICAgICAgICAgIHRoaXMucmlnaHQucHVzaChwYWdlc1twYWdlcy5sZW5ndGggLSAxXSk7XG5cbiAgICAgICAgICAgIGlmIChjdXJyZW50SW5kZXggPiAwICYmIChjdXJyZW50SW5kZXggKyAxKSA8IHBhZ2VzW3BhZ2VzLmxlbmd0aCAtIDFdKSB7XG4gICAgICAgICAgICAgIHRoaXMubGVmdC5wdXNoKHBhZ2VzW2N1cnJlbnRJbmRleF0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmFsbCA9IHRoaXMubGVmdC5jb25jYXQodGhpcy5yaWdodCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hbGw7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBzdGVwcGVkUGFnZXMgPSB7XG4gICAgICAgICAgbGVmdFN0ZXBwaW5nOiAwLFxuICAgICAgICAgIHJpZ2h0U3RlcHBpbmc6IDAsXG5cbiAgICAgICAgICBzdGVwOiBmdW5jdGlvbiAoc3BsaXRQYWdlcywgYmFsYW5jZSkge1xuICAgICAgICAgICAgdmFyIGk7XG5cbiAgICAgICAgICAgIGlmIChiYWxhbmNlLmxlZnQgPiAwKSB7XG4gICAgICAgICAgICAgIHRoaXMubGVmdFN0ZXBwaW5nID0gTWF0aC5mbG9vcihzcGxpdFBhZ2VzLmxlZnQubGVuZ3RoIC8gYmFsYW5jZS5sZWZ0KTtcblxuICAgICAgICAgICAgICBmb3IgKGkgPSAoc3BsaXRQYWdlcy5sZWZ0W3NwbGl0UGFnZXMubGVmdC5sZW5ndGggLSAxXSArIDEpIC0gdGhpcy5sZWZ0U3RlcHBpbmc7IHJlc3VsdHMubGVmdC5sZW5ndGggPCBiYWxhbmNlLmxlZnQ7IGkgPSAoaSAtIHRoaXMubGVmdFN0ZXBwaW5nKSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdHMubGVmdC51bnNoaWZ0KGkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChiYWxhbmNlLnJpZ2h0ID4gMCkge1xuICAgICAgICAgICAgICB0aGlzLnJpZ2h0U3RlcHBpbmcgPSBNYXRoLmZsb29yKHNwbGl0UGFnZXMucmlnaHQubGVuZ3RoIC8gYmFsYW5jZS5yaWdodCk7XG5cbiAgICAgICAgICAgICAgZm9yIChpID0gKHNwbGl0UGFnZXMucmlnaHRbMF0gLSAxKSArIHRoaXMucmlnaHRTdGVwcGluZzsgcmVzdWx0cy5yaWdodC5sZW5ndGggPCBiYWxhbmNlLnJpZ2h0OyBpID0gKGkgKyB0aGlzLnJpZ2h0U3RlcHBpbmcpKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0cy5yaWdodC5wdXNoKGkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHNwbGl0UGFnZXMucG9wdWxhdGUoKTtcblxuICAgICAgICB2YXIgYmFsYW5jZVBlcmNlbnRzID0gcGVyY2VudChzcGxpdFBhZ2VzLmxlZnQubGVuZ3RoLCBzcGxpdFBhZ2VzLnJpZ2h0Lmxlbmd0aCk7XG4gICAgICAgIHZhciBiYWxhbmNlcyA9IGJhbGFuY2UoKGN1cnJlbnRJbmRleCArIDEpLCBkaXNwbGF5U2l6ZSwgcGFnZXMubGVuZ3RoLCBiYWxhbmNlUGVyY2VudHMpO1xuXG4gICAgICAgIHN0ZXBwZWRQYWdlcy5zdGVwKHNwbGl0UGFnZXMsIGJhbGFuY2VzKTtcblxuICAgICAgICB2YXIgb3V0cHV0ID0gcmVzdWx0cy5qb2luKCk7XG5cbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBEZXRlcm1pbmUgdGhlIGJhbGFuY2Ugb2YgcGFnZXMgdG8gdGhlIGxlZnQgYW5kIHJpZ2h0IGp1ZGdpbmcgZnJvbSB0aGUgY3VycmVudCBwYWdlIHRoZSB1c2VyIGlzIGF0LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjdXJyZW50UGFnZSBDdXJyZW50IHBhZ2UgdGhlIHVzZXIgaXMgYXRcbiAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkaXNwbGF5U2l6ZSBMaW1pdCBvZiBwYWdlcyB0byBkaXNwbGF5XG4gICAgICAgKiBAcGFyYW0ge051bWJlcn0gbGFzdFBhZ2UgVmFsdWUgYXQgdGhlIGxhc3QgaW5kZXggb2YgdGhlIHBhZ2VzIGFycmF5XG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gcGVyY2VudGFnZXMgUGVyY2VudGFnZXMgb2JqZWN0XG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge09iamVjdH0gTGVmdC9SaWdodCByZXN1bHRzIG9iamVjdFxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBiYWxhbmNlKGN1cnJlbnRQYWdlLCBkaXNwbGF5U2l6ZSwgbGFzdFBhZ2UsIHBlcmNlbnRhZ2VzKSB7XG4gICAgICAgIGRpc3BsYXlTaXplID0gKGN1cnJlbnRQYWdlID09PSAxIHx8IGN1cnJlbnRQYWdlID09PSBsYXN0UGFnZSkgPyAoZGlzcGxheVNpemUgLSAyKSA6IChkaXNwbGF5U2l6ZSAtIDMpO1xuXG4gICAgICAgIHZhciByZXN1bHRzID0ge1xuICAgICAgICAgIGxlZnQ6IHRlYXJOdW1iZXIoZGlzcGxheVNpemUgKiAocGVyY2VudGFnZXMubGVmdCAvIDEwMCkpLmludGVnZXJWYWwsXG4gICAgICAgICAgcmlnaHQ6IHRlYXJOdW1iZXIoZGlzcGxheVNpemUgKiAocGVyY2VudGFnZXMucmlnaHQgLyAxMDApKS5pbnRlZ2VyVmFsXG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGxlZnREZWNpbWFsID0gdGVhck51bWJlcihkaXNwbGF5U2l6ZSAqIChwZXJjZW50YWdlcy5sZWZ0IC8gMTAwKSkuZGVjaW1hbFZhbDtcbiAgICAgICAgdmFyIHJpZ2h0RGVjaW1hbCA9IHRlYXJOdW1iZXIoZGlzcGxheVNpemUgKiAocGVyY2VudGFnZXMucmlnaHQgLyAxMDApKS5kZWNpbWFsVmFsO1xuXG4gICAgICAgIGlmICgocmVzdWx0cy5sZWZ0ICsgcmVzdWx0cy5yaWdodCkgIT09IGRpc3BsYXlTaXplKSB7XG4gICAgICAgICAgaWYgKGxlZnREZWNpbWFsID09PSByaWdodERlY2ltYWwpIHtcbiAgICAgICAgICAgIGlmIChyZXN1bHRzLmxlZnQgPiByZXN1bHRzLnJpZ2h0KSB7XG4gICAgICAgICAgICAgIHJlc3VsdHMubGVmdCsrO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVzdWx0cy5yaWdodCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAobGVmdERlY2ltYWwgPiByaWdodERlY2ltYWwpIHtcbiAgICAgICAgICAgICAgcmVzdWx0cy5sZWZ0Kys7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXN1bHRzLnJpZ2h0Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogRGV0ZXJtaW5lIHBlcmNlbnRhZ2Ugb2YgdHdvIGFycmF5cyB0YWtpbmcgYm90aCBzdW1tZWQgYXMgdG90YWwuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtBcnJheX0gbGVmdExlbmd0aCBMZWZ0IGFycmF5XG4gICAgICAgKiBAcGFyYW0ge0FycmF5fSByaWdodExlbmd0aCBSaWdodCBhcnJheVxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgcGVyY2VudGFnZXMgb2JqZWN0XG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIHBlcmNlbnQobGVmdExlbmd0aCwgcmlnaHRMZW5ndGgpIHtcbiAgICAgICAgdmFyIHBlcmNlbnRhZ2VzID0ge1xuICAgICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICAgIGxlZnQ6IDAsXG5cbiAgICAgICAgICBydWxlT2ZUaHJlZTogZnVuY3Rpb24gKGxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuICgxMDAgKiBsZW5ndGgpIC8gKGxlZnRMZW5ndGggKyByaWdodExlbmd0aCk7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIGRlZmluZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5sZWZ0ID0gdGhpcy5ydWxlT2ZUaHJlZShsZWZ0TGVuZ3RoKTtcbiAgICAgICAgICAgIHRoaXMucmlnaHQgPSB0aGlzLnJ1bGVPZlRocmVlKHJpZ2h0TGVuZ3RoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgcGVyY2VudGFnZXMuZGVmaW5lKCk7XG5cbiAgICAgICAgcmV0dXJuIHBlcmNlbnRhZ2VzO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFNlcGFyYXRlIGEgbnVtYmVyIGludG8gaXRzIGludGVnZXIgYW5kIGRlY2ltYWwgcGFydHNcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge051bWJlcn0gaW5wdXROdW1iZXIgTnVtYmVyIHRvIHRlYXJcbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBUb3JuIG51bWJlciBvYmplY3RcbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gdGVhck51bWJlcihudW1iZXIpIHtcbiAgICAgICAgdmFyIHRvcm5OdW1iZXIgPSB7XG4gICAgICAgICAgaW50ZWdlclZhbDogTWF0aC5mbG9vcihudW1iZXIpLFxuICAgICAgICAgIGRlY2ltYWxWYWw6IChudW1iZXIgJSAxKVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0b3JuTnVtYmVyO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFJlLWdlbmVyYXRlIG9uIHJlZnJlc2ggb3IgcGFnZSBjaGFuZ2VcbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gZ2VuZXJhdGVQYWdlc0FycmF5KCkge1xuICAgICAgICAkc2NvcGUucGFnZXMgPSBwYWdlcigkc2NvcGUudG90YWwsICRzY29wZS5wYWdlLCAkc2NvcGUucGFnZUNvdW50LCAkc2NvcGUucGFnZXNMaW1pdCk7XG5cbiAgICAgICAgJHNjb3BlLmxhc3RQYWdlID0gJHNjb3BlLnBhZ2UgPT09ICRzY29wZS5wYWdlc1skc2NvcGUucGFnZXMubGVuZ3RoIC0gMV07XG4gICAgICAgICRzY29wZS5maXJzdFBhZ2UgPSAkc2NvcGUucGFnZSA9PT0gJHNjb3BlLnBhZ2VzWzBdO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIE9uIGNvdW50IHJlcXVlc3Qgc3VjY2Vzcy5cbiAgICAgICAqXG4gICAgICAgKiBAdHlwZSAkaHR0cCB0aGVuIGNhbGxiYWNrLlxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBvbkNvdW50U3VjY2VzcyhyZXMpIHtcbiAgICAgICAgJHNjb3BlLnBhZ2VzTGltaXQgPSBwYXJzZUludCgkYXR0cnMubmdwUGFnZXNMaW1pdCkgfHwgNztcbiAgICAgICAgJHNjb3BlLnBhZ2VDb3VudCA9IHBhcnNlSW50KCRhdHRycy5uZ3BQYWdlQ291bnQpIHx8IDEwO1xuICAgICAgICAkc2NvcGUudG90YWwgPSBwYXJzZUludChyZXMuZGF0YSkgfHwgMDtcblxuICAgICAgICBnZW5lcmF0ZVBhZ2VzQXJyYXkoKTtcblxuICAgICAgICBpZiAoJGF0dHJzLm5ncFN0YXJ0UGFnZSkge1xuICAgICAgICAgICRzY29wZS5wYWdlID0gcGFyc2VJbnQoJGF0dHJzLm5ncFN0YXJ0UGFnZSkgfHwgMTtcblxuICAgICAgICAgIHZhciBsYXN0UGFnZSA9ICRzY29wZS5wYWdlc1skc2NvcGUucGFnZXMubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgICBpZiAoJHNjb3BlLnBhZ2UgPiBsYXN0UGFnZSkge1xuICAgICAgICAgICAgJHNjb3BlLnBhZ2UgPSBsYXN0UGFnZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoJHNjb3BlLnBhZ2UgPCAxKSB7XG4gICAgICAgICAgICAkc2NvcGUucGFnZSA9IDE7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc29sZS5sb2coJ1N0YXJ0IHBhZ2U6ICcgKyAkc2NvcGUucGFnZSk7XG4gICAgICAgIH1cblxuICAgICAgICBnZW5lcmF0ZVBhZ2VzQXJyYXkoKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBTZXRzIHRoZSBjdXJyZW50IHBhZ2UuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHBhZ2UgVGhlIHBhZ2UgbnVtYmVyIHRvIHNldC5cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gc2V0UGFnZShwYWdlKSB7XG4gICAgICAgIHBhZ2UgPSBwYXJzZUludChwYWdlKTtcblxuICAgICAgICBjb25zb2xlLmxvZygnQ3VycmVudCBzY29wZSBwYWdlOicsICRzY29wZS5wYWdlKTtcbiAgICAgICAgY29uc29sZS5sb2coJ1RyeWluZyB0byBzZXQgcGFnZTonLCBwYWdlKTtcblxuICAgICAgICBpZiAoIWlzTmFOKHBhZ2UpICYmICRzY29wZS5wYWdlICE9PSBwYWdlKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ05ldyBwYWdlOicsIHBhZ2UpO1xuXG4gICAgICAgICAgJHNjb3BlLnBhZ2UgPSBwYWdlO1xuICAgICAgICAgICRzY29wZS5wYWdlcihwYWdlKTtcblxuICAgICAgICAgIGdlbmVyYXRlUGFnZXNBcnJheSgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogR29lcyB0byB0aGUgbmV4dCBwYWdlLlxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICBpZiAoJHNjb3BlLnBhZ2UgPCAkc2NvcGUucGFnZXNbJHNjb3BlLnBhZ2VzLmxlbmd0aCAtIDFdKSB7XG4gICAgICAgICAgc2V0UGFnZSgkc2NvcGUucGFnZSArIDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogR29lcyB0byB0aGUgcHJldmlvdXMgcGFnZS5cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gcHJldigpIHtcbiAgICAgICAgaWYgKCRzY29wZS5wYWdlID4gJHNjb3BlLnBhZ2VzWzBdKSB7XG4gICAgICAgICAgc2V0UGFnZSgkc2NvcGUucGFnZSAtIDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogUmVzZXRzIHRoZSBjb3VudGVyIGFuZCBmZXRjaGVzIHRoZSB0b3RhbCBjb3VudCBhZ2Fpbi5cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgICAgICRodHRwLmdldCgkYXR0cnMubmdwQ291bnRVcmwpXG4gICAgICAgICAgLnRoZW4ob25Db3VudFN1Y2Nlc3MsIG5nLm5vb3ApO1xuICAgICAgfVxuXG4gICAgICAkc2NvcGUuc2V0UGFnZSA9IHNldFBhZ2U7XG4gICAgICAkc2NvcGUucmVzZXQgPSByZXNldDtcbiAgICAgICRzY29wZS5uZXh0ID0gbmV4dDtcbiAgICAgICRzY29wZS5wcmV2ID0gcHJldjtcblxuICAgICAgJHNjb3BlLmZpcnN0UGFnZSA9IGZhbHNlO1xuICAgICAgJHNjb3BlLmxhc3RQYWdlID0gZmFsc2U7XG4gICAgICAkc2NvcGUucGFnZXMgPSBbXTtcbiAgICAgICRzY29wZS5wYWdlID0gMTtcblxuICAgICAgcmVzZXQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYWdpbmF0aW9uIGRpcmVjdGl2ZSB0ZW1wbGF0ZSBVUkwgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAdHlwZSBBbmd1bGFySlMgRGlyZWN0aXZlIFRlbXBsYXRlIFVSTCBGdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBuZ1BhZ2luYXRpb25EaXJlY3RpdmVUZW1wbGF0ZVVybEZuKCRlbGVtZW50LCAkYXR0cnMpIHtcbiAgICAgIHJldHVybiAkYXR0cnMubmdwVGVtcGxhdGVVcmw7XG4gICAgfVxuXG4gICAgLyogUGFnaW5hdGlvbiBkaXJlY3RpdmUgZGVmaW5pdGlvbiAqL1xuICAgIHZhciBuZ1BhZ2luYXRpb25EaXJlY3RpdmVEZWYgPSB7XG4gICAgICB0ZW1wbGF0ZVVybDogbmdQYWdpbmF0aW9uRGlyZWN0aXZlVGVtcGxhdGVVcmxGbixcblxuICAgICAgbGluazogbmdQYWdpbmF0aW9uRGlyZWN0aXZlTGlua0ZuLFxuXG4gICAgICByZXN0cmljdDogJ0EnLFxuXG4gICAgICBzY29wZToge1xuICAgICAgICBwYWdlcjogJz1uZ3BQYWdlcidcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIG5nUGFnaW5hdGlvbkRpcmVjdGl2ZURlZjtcbiAgfVxuXG4gIC8qIERlZmluZSB0aGUgQW5ndWxhckpTIG1vZHVsZSAqL1xuICBuZy5tb2R1bGUoJ25nUGFnZXInLCBbXSlcblxuICAgIC8qIERlZmluZSB0aGUgQW5ndWxhckpTIGRpcmVjdGl2ZSAqL1xuICAgIC5kaXJlY3RpdmUoJ25nUGFnZXInLCBbXG4gICAgICAnJGh0dHAnLFxuXG4gICAgICBuZ1BhZ2luYXRpb25EaXJlY3RpdmVGblxuICAgIF0pO1xuXG59KHdpbmRvdykpOyJdfQ==
